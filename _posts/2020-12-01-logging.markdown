---
layout: post
title: "[spring]로그설정"
date: 2020-12-01 15:27:23 +0900
category: springboot
---

## logback이란?
자바 오픈소스 로깅 프레임워크(SLF4J의 구현체)
스프링부트의 기본설정, 별도 라이브러리를 추가하지 않아도 된다.

> **스프링부트**    
1) classpath에 logback-spring.xml파일이 있으면 설정파일을 읽어간다.  
2) logback-spring.xml이 없으면 .yml 파일의 설정을 읽어간다. (나는 application.yml)  
3) 둘다 있으면 .yml 설정파일을 적용 후 .xml파일이 적용된다.  

        
application-prod.yml 설정파일에 local, dev, prod 로 설정할 수 있다.   
logback-spring.xml의 경로도 지정한다. 
```yml
spring:
  profiles:
    active : prod # local(로컬), dev(개발) , prod(운영)  

# (생략)

logging:
  level:
    org:
      hibernate:
        sql: info
        type:
          descriptor:
            sql: info
  config: logback-spring.xml
```
실행할때 active 값을 준다. 
`java -jar -Dspring.profiles.active=prod ex-corporation_DApp-master-0.0.1-SNAPSHOT.jar`    


> **ERROR LEVEL**   
TRACE < DEBUG < INFO < WARN < ERROR   

로그의 설정할 수 있는 레벨은 5가지이다.
1) ERROR : 요청을 처리하는 중 오류가 발생한 경우 표시한다.
2) WARN  : 처리 가능한 문제, 향후 시스템 에러의 원인이 될 수 있는 경고성 메시지를 나타낸다.
3) INFO  : 상태변경과 같은 정보성 로그를 표시한다.
4) DEBUG : 프로그램을 디버깅하기 위한 정보를 표시한다. 
5) TRACE : 추적 레벨은 Debug보다 훨씬 상세한 정보를 나타낸다. 


> **logback-spring.xml 설정 예시**        

```console
	<?xml version="1.0" encoding="UTF-8"?>
	<configuration>

		<!--  로그파일 저장 위치 -->
		<property name="LOG_DIR" value="ex_logs/" />  
		<property name="LOG_DIR_PROD" value="/log/dapp/pass/" />
		<property name="LOG_FILE_NAME" value="ex_DApp" />
		
		<springProfile name="local">
			<!--  콘솔에 로그 찍음. -->
			<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
				<!-- By default, encoders are assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
				<encoder>
					<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{5} - %msg%n</pattern>
				</encoder>
			</appender>
			
			<!--RollingFileAppender: 여러개 파일을 순회하면서 로그 찍음(일자별). -->
			<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
				<file>${LOG_DIR}${LOG_FILE_NAME}.log</file>
				
				<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
					<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
				</encoder>
				
				<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
					<fileNamePattern>${LOG_DIR}${LOG_FILE_NAME}_%d{yyyy-MM-dd}.log</fileNamePattern>
					
					<!-- 설정한 일자만큼 보관 후 삭제-->
					<maxHistory>30</maxHistory>
				</rollingPolicy>
			</appender>	
			
			<logger name="kr.co" level="INFO"/>
			<logger name="org.hibernate.SQL" level="INFO" />>
			<root level="INFO">
				<appender-ref ref="STDOUT" />
				<appender-ref ref="FILE" />
			</root>
		</springProfile>
	</configuration>
```   

> **logger 등록 및 사용방법**   
`private static final Logger logger = LoggerFactory.getLogger(PthaInfoController.class);`     
`logger.info("========== saveWoutData START ==========");`  



* * *
참고URL   
https://goddaehee.tistory.com/206?category=367461